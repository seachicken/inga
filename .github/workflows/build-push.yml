name: Build and push Docker images

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/inga

jobs:
  build-core:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
    env:
      DOCKER_BUILD_SUMMARY: false

    steps:
      - name: Prepare
        run: |
          PLATFORM=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${PLATFORM//\//-}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ./docker/core/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-core:
    runs-on: ubuntu-latest
    needs:
      - build-core
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=sha

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

  build:
    runs-on: ubuntu-latest
    needs:
      - merge-core
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        target: [java-8, java-11, java-17, java-21, typescript]
    env:
      DOCKER_BUILD_SUMMARY: false

    steps:
      - name: Prepare
        run: |
          echo "LANGUAGE=$(echo ${{ matrix.target }} | cut -d'-' -f1)" >> $GITHUB_ENV
          JAVA_VERSION=$(echo ${{ matrix.target }} | cut -d'-' -f2)
          if [ -z "$JAVA_VERSION" ]; then
            JAVA_VERSION="";
          fi
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: suffix=-${{ matrix.target }},onlatest=true
          tags: |
            type=semver,pattern={{version}}
            type=sha

      - name: Extract Docker tag metadata
        id: meta-tag
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          build-args: |
            INGA_IMAGE=ghcr.io/seachicken/inga:${{ steps.meta-tag.outputs.version }}
            JAVA_VERSION=${{ env.JAVA_VERSION }}
          file: ./docker/${{ env.LANGUAGE }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Inspect image
        run: |
          echo "## Pushed the built image for ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo '| Name | Tag |' >> $GITHUB_STEP_SUMMARY
          echo '| ---- | --- |' >> $GITHUB_STEP_SUMMARY
          echo "| ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} | ${{ steps.meta.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>details</summary><pre>" >> $GITHUB_STEP_SUMMARY
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} >> $GITHUB_STEP_SUMMARY
          echo '</pre></details>' >> $GITHUB_STEP_SUMMARY

